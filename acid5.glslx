float time = (12.5+1.39)*.3;

// 2D rotation matrix.
mat2 rotate(float angle)
{
    return mat2(
        vec2( cos(angle), sin(angle)),
        vec2(-sin(angle), cos(angle)));
}

// Transform a point on square to a circle.
vec2 mapSquare(in vec2 p)
{
    vec2 ap = abs(p);
    float r = max(ap.x, ap.y);
    float angle = atan(p.y, p.x);

    return r*vec2(cos(angle), sin(angle));
}

// Make a pattern of squares in a repeating grid.
vec2 dupSquares(in vec2 p)
{
    vec2 ap = abs(sin(p*3.));
    float r = max(ap.x, ap.y);
    float angle = atan(p.y, p.x);

    return r*vec2(cos(angle), sin(angle));
}

// Duplicate pattern in dupSquaresConcentric squares.
vec2 dupSquaresConcentric(in vec2 p)
{
    vec2 ap = abs(p);
    float r = max(ap.x, ap.y);
    float angle = atan(p.y, p.x);

    return sin(3.*r)*vec2(cos(angle), sin(angle));
}

// Duplicate pattern in a repeating grid.
vec2 dupGrid(in vec2 p)
{
    return abs(sin(p*4.));
}

float numPhases = 4.;
vec2 getTransform(in vec2 p, float t)
{
    int which = int(mod(t, 3.)+1.);

    if (which == 0) {
        p = rotate(time*.3)*p*.7;
        p = dupSquares(p);
    } else if (which == 1) {
        p = dupSquares(p);
        p = rotate(time*.2)*p;
        p = dupSquares(p);
    } else if (which == 2) {
        p = dupSquares(rotate(.05*3.14)*p);
        p = rotate(time*.3)*p;
        p = dupSquaresConcentric(p);
    } else {
        p = dupSquaresConcentric(p*1.5);
    }
    return p;
}

vec2 applyTransform(in vec2 p)
{
    float t = time*.35;
#ifdef DEBUG
    if (iMouse.z > .001) t = iMouse.x/iResolution.x * numPhases;
#endif
    float pct = smoothstep(0., 1., mod(t, 1.));
    return mix(getTransform(p, t), getTransform(p, t+1.), pct);
}


mat3 rotation(float angle, vec3 axis)
{
    vec3 a = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat3(oc * a.x * a.x + c,        oc * a.x * a.y - a.z * s,  oc * a.z * a.x + a.y * s,
                oc * a.x * a.y + a.z * s,  oc * a.y * a.y + c,        oc * a.y * a.z - a.x * s,
                oc * a.z * a.x - a.y * s,  oc * a.y * a.z + a.x * s,  oc * a.z * a.z + c);
}

#define rMouse (10.0*iMouse.xy/iResolution.xy)


// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec4 gradient(float f)
{
    vec3 col1 = 0.5 + 0.5*sin(f*0.908 + vec3(0.941,1.000,0.271));
	vec3 col2 = 0.5 + 0.5*sin(f*7.240 + vec3(0.611,0.556,1.000));
	vec3 c = 1.888*pow(col1*col2, vec3(0.800,0.732,0.660));

    vec3 axis = 0.602*10.064*vec3(0.448,0.713,1.072);
    c = rotation(length(axis), axis)*c;
    return vec4(c, 1.0);
}


float offset(float th)
{
    return .2*sin(25.*th)*sin(time);
}

vec4 tunnel(float th, float radius)
{
	return gradient(offset(th) + 2.*log(radius) - time);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
    p.x *= iResolution.x/iResolution.y;

    // p = rotate(0.95)*p;
    p = rotate(0.8)*p;
    p = applyTransform(p);

	fragColor = tunnel(atan(p.y, p.x), 2.0 * length(p));
}
